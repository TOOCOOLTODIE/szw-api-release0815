<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.szw.mapper.BlogDao">
  <resultMap id="BaseResultMap" type="com.szw.entity.Blog">
    <id column="blog_id" jdbcType="INTEGER" property="id" />
    <result column="blog_title" jdbcType="VARCHAR" property="title" />
    <result column="blog_tags" jdbcType="VARCHAR" property="tags" />
    <result column="blog_user_id" jdbcType="INTEGER" property="userId" />
    <result column="blog_public_time" jdbcType="TIMESTAMP" property="publicTime" />
    <result column="blog_update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="blog_is_private" jdbcType="CHAR" property="isPrivate" />
    <result column="blog_note" jdbcType="VARCHAR" property="note" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.szw.entity.Blog">
    <result column="blog_content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    blog.id as blog_id, blog.title as blog_title, blog.tags as blog_tags, blog.user_id as blog_user_id, 
    blog.public_time as blog_public_time, blog.update_time as blog_update_time, blog.is_private as blog_is_private, 
    blog.note as blog_note
  </sql>
  <sql id="Blob_Column_List">
    blog.content as blog_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.szw.entity.BlogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog blog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.szw.entity.BlogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog blog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog blog
    where blog.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blog
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.szw.entity.BlogExample">
    delete from blog blog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.szw.entity.Blog" useGeneratedKeys="true">
    insert into blog (title, tags, user_id, 
      public_time, update_time, is_private, 
      note, content)
    values (#{title,jdbcType=VARCHAR}, #{tags,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{publicTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{isPrivate,jdbcType=CHAR}, 
      #{note,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.szw.entity.Blog" useGeneratedKeys="true">
    insert into blog
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="title != null">
        title,
      </if>
      <if test="tags != null">
        tags,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="publicTime != null">
        public_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="isPrivate != null">
        is_private,
      </if>
      <if test="note != null">
        note,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="tags != null">
        #{tags,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="publicTime != null">
        #{publicTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isPrivate != null">
        #{isPrivate,jdbcType=CHAR},
      </if>
      <if test="note != null">
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.szw.entity.BlogExample" resultType="java.lang.Long">
    select count(*) from blog blog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update blog blog
    <set>
      <if test="record.id != null">
        blog.id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        blog.title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.tags != null">
        blog.tags = #{record.tags,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        blog.user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.publicTime != null">
        blog.public_time = #{record.publicTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        blog.update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isPrivate != null">
        blog.is_private = #{record.isPrivate,jdbcType=CHAR},
      </if>
      <if test="record.note != null">
        blog.note = #{record.note,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null">
        blog.content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update blog blog
    set blog.id = #{record.id,jdbcType=INTEGER},
      blog.title = #{record.title,jdbcType=VARCHAR},
      blog.tags = #{record.tags,jdbcType=VARCHAR},
      blog.user_id = #{record.userId,jdbcType=INTEGER},
      blog.public_time = #{record.publicTime,jdbcType=TIMESTAMP},
      blog.update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      blog.is_private = #{record.isPrivate,jdbcType=CHAR},
      blog.note = #{record.note,jdbcType=VARCHAR},
      blog.content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update blog blog
    set blog.id = #{record.id,jdbcType=INTEGER},
      blog.title = #{record.title,jdbcType=VARCHAR},
      blog.tags = #{record.tags,jdbcType=VARCHAR},
      blog.user_id = #{record.userId,jdbcType=INTEGER},
      blog.public_time = #{record.publicTime,jdbcType=TIMESTAMP},
      blog.update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      blog.is_private = #{record.isPrivate,jdbcType=CHAR},
      blog.note = #{record.note,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.szw.entity.Blog">
    update blog
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="tags != null">
        tags = #{tags,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="publicTime != null">
        public_time = #{publicTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isPrivate != null">
        is_private = #{isPrivate,jdbcType=CHAR},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.szw.entity.Blog">
    update blog
    set title = #{title,jdbcType=VARCHAR},
      tags = #{tags,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      public_time = #{publicTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_private = #{isPrivate,jdbcType=CHAR},
      note = #{note,jdbcType=VARCHAR},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.szw.entity.Blog">
    update blog
    set title = #{title,jdbcType=VARCHAR},
      tags = #{tags,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      public_time = #{publicTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_private = #{isPrivate,jdbcType=CHAR},
      note = #{note,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="loadBlogsByUserId" parameterType="map" resultType="com.szw.entity.Blog">
    select
    blog.id as id,
    blog.title as title,
    blog.tags as tags,
    blog.content as content,
    blog.user_id as userId,
    blog.public_time as publicTime,
    blog.update_time as updateTime,
    blog.is_private as isPrivate,
    blog.note as note
    from blog blog
    <where>
      blog.user_id = #{userId}
      <if test="keywords !=null and keywords !=''">
        and blog.title like concat('%',#{keywords},'%') or blog.tags like concat('%',#{keywords},'%')
      </if>
    </where>
    <if test="start !=null and size !=null ">
      limit #{start},#{size}
    </if>
  </select>

  <select id="loadBlogsByUserIdCount" parameterType="map" resultType="Long">
    select count(*)
    from blog blog
    <where>
      blog.user_id = #{userId}
      <if test="keywords !=null and keywords !=''">
        and  blog.title like concat('%',#{keywords},'%') or blog.tags like concat('%',#{keywords},'%')
      </if>
    </where>
  </select>

  <insert id="insertSelectiveBlog" parameterType="map">
    INSERT INTO blog
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="title !=null and title != ''">
        title,
      </if>
      <if test="tags !=null and tags != ''">
        tags,
      </if>
      <if test="userId !=null and userId != ''">
        user_id ,
      </if>
      <if test="publicTime !=null">
        public_time ,
      </if>
      <if test="updateTime !=null">
        update_time,
      </if>
      <if test="isPrivate !=null and isPrivate != ''">
        is_private ,
      </if>
      <if test="note !=null and note != ''">
        note ,
      </if>
      <if test="content !=null">
        content,
      </if>
    </trim>

   <trim prefix="values (" suffix=")" suffixOverrides=",">
     <if test="title !=null and title != ''">
       #{title},
     </if>
     <if test="tags !=null and tags != ''">
       #{tags},
     </if>
     <if test="userId !=null and userId != ''">
      #{userId},
     </if>
     <if test="publicTime !=null">
      #{publicTime},
     </if>
     <if test="updateTime !=null">
      #{updateTime},
     </if>
     <if test="isPrivate !=null and isPrivate != ''">
       #{isPrivate},
     </if>
     <if test="note !=null and note != ''">
      #{note},
     </if>
     <if test="content !=null">
       #{content},
     </if>
   </trim>


  </insert>
</mapper>